# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  test:
    docker:
    # specify the version you desire here
    - image: circleci/openjdk:8-jdk
      environment:
        TEST_DATABASE_URL: jdbc:postgresql://localhost:5432/postgres

    - image: circleci/postgres:11.2

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
      TERM: dumb

    steps:
    - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install postgresql-client-11.2
      - run: whoami
      - run: |
          psql \
          -d $TEST_DATABASE_URL \
          -c "CREATE TABLE test (name char(25));"
      - run: |
          psql \
          -d $TEST_DATABASE_URL \
          -c "INSERT INTO test VALUES ('John'), ('Joanna'), ('Jennifer');"
      - run: |
          psql \
          -d $TEST_DATABASE_URL \
          -c "SELECT * from test"

    # Download and cache dependencies
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "pom.xml" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-

    - run: mvn dependency:go-offline

    - save_cache:
        paths:
        - ~/.m2
        key: v1-dependencies-{{ checksum "pom.xml" }}

    # run tests!
    - run: mvn test

    - run: mvn sonar:sonar -Dsonar.organization=${MY_ORGANIZATION} -Dsonar.host.url=${MY_HOST}  -Dsonar.login=${MY_LOGIN}

  build:
    docker:
    # specify the version you desire here
    - image: circleci/openjdk:8-jdk

    # Specify service dependencies here if necessary
    # CircleCI maintains a library of pre-built images
    # documented at https://circleci.com/docs/2.0/circleci-images/
    # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m
      TERM: dumb

    steps:
    - checkout

    - setup_remote_docker

    # Download and cache dependencies
    - restore_cache:
        keys:
        - v1-dependencies-{{ checksum "pom.xml" }}
        # fallback to using the latest cache if no exact match is found
        - v1-dependencies-

    - run: mvn dependency:go-offline

    - save_cache:
        paths:
        - ~/.m2
        key: v1-dependencies-{{ checksum "pom.xml" }}

    # run tests!
    - run: mvn package


  deploy:
    docker:
    - image: circleci/openjdk:8-jdk
    steps:
    - checkout
    - run:
        name: Deploy Master to Heroku
        command: |
          git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_APP_NAME.git master


workflows:
  version: 2
  test-build-deploy:
    jobs:
    - test
    - build:
        requires:
        - test
    - deploy:
        requires:
        - build
        filters:
          branches:
            only: master
